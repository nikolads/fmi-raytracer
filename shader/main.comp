#version 450
#extension GL_ARB_separate_shader_objects : enable

const int WIDTH = 800;
const int HEIGHT = 600;
const int WORKGROUP_SIZE = 32;
layout(local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(binding = 0, rgba8) writeonly restrict uniform image2D work_image;

const vec3 SPHERE_CENTER = vec3(-0.5, -0.5, 1.5);
const float SPHERE_RADIUS = 0.3;
const vec3 SPHERE_COLOR = vec3(0.5, 0.0, 0.0);

float length_sq(vec3 v) {
    return dot(v, v);
}

void main() {
    // In order to fit the work into workgroups, some unnecessary threads are launched.
    if (gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT) { return; }

    const float ASPECT_RATIO = float(HEIGHT) / float(WIDTH);

    vec3 origin = vec3(
        (-1.0 + float(gl_GlobalInvocationID.x) / float(WIDTH) * 2.0),
        (-1.0 + float(gl_GlobalInvocationID.y) / float(HEIGHT) * 2.0) * ASPECT_RATIO,
        0.0
    );
    vec3 dir = origin - vec3(0.0, 0.0, -1.0);
    vec3 color;

    // see lecture 5 for equation
    vec3 h = origin - SPHERE_CENTER;
    float a = 1.0;
    float b = 2 * dot(dir, h);
    float c = length_sq(h) - sqrt(SPHERE_RADIUS);

    float disc = b * b - 4 * a * c;
    if (disc < 0.0) {
        color = vec3(0.0, 0.0, 1.0);
    } else {
        float sqrt_disc = sqrt(disc);
        float p1 = (-b + sqrt_disc) / (2 * a);
        float p2 = (-b - sqrt_disc) / (2 * a);

        float smaller = min(p1, p2);
        float larger = max(p1, p2);

        float dist = (smaller >= 0.0) ? smaller : larger;

        if (dist < 0.0) {
            color = vec3(0.0, 0.0, 0.0);
        } else {
            vec3 intersection_point = origin + dist * dir;
            vec3 intersection_dir = normalize(origin - intersection_point);
            vec3 sphere_normal = normalize(intersection_point - SPHERE_CENTER);

            color = SPHERE_COLOR * dot(intersection_dir, sphere_normal);
        }
    }

    imageStore(work_image, ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y), vec4(color.b, color.g, color.r, 1.0));
}
